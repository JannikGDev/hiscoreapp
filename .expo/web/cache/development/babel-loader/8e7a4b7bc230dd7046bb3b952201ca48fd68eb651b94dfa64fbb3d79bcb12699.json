{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport React, { useState } from 'react';\nimport styles from \"../styles/defaultStyle\";\nimport Spacer from \"../shared/Spacer\";\nimport MessageBox from \"../shared/MessageBox\";\nimport { Register } from \"../shared/CompanionAPI\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RegisterScreen = function RegisterScreen(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    userName = _useState2[0],\n    setUserName = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(\"\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    mail = _useState6[0],\n    setMail = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    showMessage = _useState8[0],\n    setShowMessage = _useState8[1];\n  var _useState9 = useState(\"\"),\n    _useState10 = _slicedToArray(_useState9, 2),\n    message = _useState10[0],\n    setMessage = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    registerComplete = _useState12[0],\n    setRegisterComplete = _useState12[1];\n  return _jsxs(View, {\n    style: styles.pageContainer,\n    children: [_jsx(Text, {\n      style: styles.pageTitle,\n      children: \"Registrieren\"\n    }), _jsx(Spacer, {\n      bottom: 24\n    }), _jsxs(SafeAreaView, {\n      style: {\n        width: '80%'\n      },\n      children: [_jsx(Text, {\n        style: styles.text,\n        children: \"Gebe einen neuen Benutzernamen, E-Mail Adresse und Passwort mit mindestens 8 Zeichen ein um dich zu registrieren.\"\n      }), _jsx(Spacer, {\n        bottom: 12\n      })]\n    }), _jsx(MessageBox, {\n      text: message,\n      show: showMessage,\n      onClose: function onClose() {\n        setShowMessage(false);\n        if (registerComplete) navigation.goBack();\n      }\n    }), _jsxs(SafeAreaView, {\n      style: {\n        width: '50%'\n      },\n      children: [_jsx(TextInput, {\n        style: styles.textInput,\n        onChangeText: setUserName,\n        placeholder: \"Benutzername\",\n        value: userName,\n        keyboardType: \"default\",\n        textContentType: \"username\"\n      }), _jsx(TextInput, {\n        style: styles.textInput,\n        onChangeText: setMail,\n        value: mail,\n        placeholder: \"E-Mail-Adresse\",\n        textContentType: \"emailAddress\",\n        autoCorrect: false,\n        keyboardType: \"email-address\"\n      }), _jsx(TextInput, {\n        style: styles.textInput,\n        onChangeText: setPassword,\n        value: password,\n        placeholder: \"Passwort\",\n        textContentType: \"newPassword\",\n        secureTextEntry: true\n      })]\n    }), _jsx(Spacer, {\n      bottom: 16\n    }), _jsx(View, {\n      style: {\n        width: '50%'\n      },\n      children: _jsx(Button, {\n        title: \"Registrieren\",\n        color: styles.button.color,\n        onPress: _asyncToGenerator(function* () {\n          if (registerComplete) return;\n          if (userName.length == 0 || password.length < 8 || mail.length == 0) {\n            setMessage(\"Bitte gebe einen Nutzernamen, eine E-Mail und ein Passwort mit mindestens 8 Zeichen an.\");\n            setShowMessage(true);\n            return;\n          }\n          var result = yield Register(userName, password, mail);\n          if (result.statusCode != 200) {\n            console.log(result);\n            if (result.message.includes('The given UserName')) {\n              setMessage(\"Der eingegebene Benutzername ist bereits vergeben.\");\n              setShowMessage(true);\n            } else if (result.message.includes('The given Mail')) {\n              setMessage(\"Die eingegebene E-Mail ist bereits vergeben.\");\n              setShowMessage(true);\n            } else {\n              setMessage(\"Die Eingabe wurde abgelehnt mit der Nachricht: \" + result.message);\n              setShowMessage(true);\n            }\n            return;\n          }\n          setMessage(result.message);\n          setShowMessage(true);\n          if (result.success) setRegisterComplete(true);\n        })\n      })\n    })]\n  });\n};\nexport default RegisterScreen;","map":{"version":3,"names":["React","useState","styles","Spacer","MessageBox","Register","jsx","_jsx","jsxs","_jsxs","RegisterScreen","_ref","navigation","route","_useState","_useState2","_slicedToArray","userName","setUserName","_useState3","_useState4","password","setPassword","_useState5","_useState6","mail","setMail","_useState7","_useState8","showMessage","setShowMessage","_useState9","_useState10","message","setMessage","_useState11","_useState12","registerComplete","setRegisterComplete","View","style","pageContainer","children","Text","pageTitle","bottom","SafeAreaView","width","text","show","onClose","goBack","TextInput","textInput","onChangeText","placeholder","value","keyboardType","textContentType","autoCorrect","secureTextEntry","Button","title","color","button","onPress","_asyncToGenerator","length","result","statusCode","console","log","includes","success"],"sources":["C:/Workspace/Programming/Mobile/hiscoreapp/HI-SCORE/screens/RegisterScreen.js"],"sourcesContent":["import { StyleSheet, Text, View, Image, Button, TextInput, SafeAreaView } from 'react-native';\r\nimport React, {useState} from 'react';\r\nimport styles from '../styles/defaultStyle';\r\nimport Spacer from '../shared/Spacer'\r\nimport MessageBox from '../shared/MessageBox'\r\nimport { Register } from '../shared/CompanionAPI'\r\n\r\n\r\n\r\nconst RegisterScreen = ({navigation, route}) => {\r\n\r\n\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [mail, setMail] = useState(\"\");\r\n\r\n    const [showMessage, setShowMessage] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const [registerComplete, setRegisterComplete] = useState(false);\r\n\r\n    return (\r\n        <View style={styles.pageContainer}> \r\n\r\n        <Text style={styles.pageTitle}>Registrieren</Text>\r\n\r\n        <Spacer bottom={24} />\r\n        <SafeAreaView style = {{width: '80%'}}>\r\n        <Text style={styles.text}>\r\n            Gebe einen neuen Benutzernamen, E-Mail Adresse und Passwort mit mindestens 8 Zeichen ein um dich zu registrieren.\r\n            </Text>\r\n        <Spacer bottom={12} />\r\n\r\n        </SafeAreaView>\r\n\r\n        <MessageBox \r\n            text={message}\r\n            show={showMessage}\r\n            onClose={() => {\r\n                setShowMessage(false);\r\n                if(registerComplete)\r\n                    navigation.goBack();\r\n            }}\r\n        />\r\n\r\n        <SafeAreaView style = {{width: '50%'}}>\r\n            <TextInput\r\n                style={styles.textInput}\r\n                onChangeText={setUserName}\r\n                placeholder=\"Benutzername\"\r\n                value={userName}\r\n                keyboardType='default'\r\n                textContentType='username'\r\n            />\r\n            <TextInput\r\n                style={styles.textInput}\r\n                onChangeText={setMail}\r\n                value={mail}\r\n                placeholder=\"E-Mail-Adresse\"\r\n                textContentType='emailAddress'\r\n                autoCorrect={false}\r\n                keyboardType='email-address'\r\n            />\r\n            <TextInput\r\n                style={styles.textInput}\r\n                onChangeText={setPassword}\r\n                value={password}\r\n                placeholder=\"Passwort\"\r\n                textContentType='newPassword'\r\n                secureTextEntry={true}\r\n            />\r\n        </SafeAreaView>\r\n\r\n        <Spacer bottom={16} />\r\n\r\n        <View style = {{width: '50%'}}>\r\n            <Button\r\n            title=\"Registrieren\"\r\n            color={styles.button.color}\r\n            onPress={ async () =>\r\n            {\r\n                if(registerComplete)\r\n                    return;\r\n\r\n                if(userName.length == 0 || password.length < 8 || mail.length == 0) {\r\n                    setMessage(\"Bitte gebe einen Nutzernamen, eine E-Mail und ein Passwort mit mindestens 8 Zeichen an.\");\r\n                    setShowMessage(true);\r\n                    return;\r\n                }\r\n\r\n                let result = await Register(userName, password, mail);\r\n                \r\n                if(result.statusCode != 200) {\r\n                    console.log(result);\r\n                    if(result.message.includes('The given UserName')) {\r\n                        setMessage(\"Der eingegebene Benutzername ist bereits vergeben.\");\r\n                        setShowMessage(true);\r\n                    }\r\n                    else if(result.message.includes('The given Mail')) {\r\n                        setMessage(\"Die eingegebene E-Mail ist bereits vergeben.\");\r\n                        setShowMessage(true);\r\n                    }\r\n                    else {\r\n                        setMessage(\"Die Eingabe wurde abgelehnt mit der Nachricht: \" + result.message);\r\n                        setShowMessage(true);\r\n                    }\r\n                   \r\n                    return;\r\n                }\r\n\r\n                setMessage(result.message);\r\n                setShowMessage(true);\r\n                if(result.success)\r\n                   setRegisterComplete(true);\r\n                }\r\n            }\r\n            />\r\n        </View>\r\n\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}