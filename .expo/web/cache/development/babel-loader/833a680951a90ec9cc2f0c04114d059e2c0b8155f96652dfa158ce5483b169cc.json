{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { StatusBar } from 'expo-status-bar';\nimport * as React from 'react';\nimport defaultStyles from \"./styles/defaultStyle.js\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport HomeScreen from \"./screens/HomeScreen.js\";\nimport ProfileScreen from \"./screens/ProfileScreen.js\";\nimport RegisterScreen from \"./screens/RegisterScreen.js\";\nimport LoginScreen from \"./screens/LoginScreen.js\";\nimport QuestListScreen from \"./screens/QuestListScreen.js\";\nimport { UserContext } from \"./shared/Contexts.js\";\nimport { IsLoggedIn } from \"./shared/GlobalStorage.js\";\nimport SplashScreen from \"./screens/SplashScreen.js\";\nimport PasswordResetScreen from \"./screens/PasswordResetScreen.js\";\nimport { GetUserData } from \"./shared/CompanionAPI.js\";\nimport { QRScannerScreen } from \"./screens/QRScannerScreen.js\";\nimport QRCodeGeneratorScreen from \"./screens/QRCodeGenerator.js\";\nimport Spacer from \"./shared/Spacer.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    userState = _React$useState2[0],\n    setUserState = _React$useState2[1];\n  React.useEffect(function () {\n    function checkLogin() {\n      return _checkLogin.apply(this, arguments);\n    }\n    function _checkLogin() {\n      _checkLogin = _asyncToGenerator(function* () {\n        var loggedIn = yield IsLoggedIn();\n        var isAdmin = false;\n        if (loggedIn) {\n          var result = yield GetUserData();\n          loggedIn = loggedIn && result.success;\n          isAdmin = result.response.isAdmin;\n        }\n        var newUserState = _objectSpread({}, userState);\n        newUserState.loggedIn = loggedIn;\n        newUserState.isAdmin = isAdmin;\n        setUserState(newUserState);\n      });\n      return _checkLogin.apply(this, arguments);\n    }\n    checkLogin();\n  }, []);\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      backgroundColor: defaultStyles.container.backgroundColor\n    },\n    children: _jsx(UserContext.Provider, {\n      value: {\n        userState: userState,\n        setUserState: setUserState\n      },\n      children: _jsx(NavigationContainer, {\n        children: _jsxs(Stack.Navigator, {\n          screenOptions: {\n            headerShown: false\n          },\n          children: [userState == null ? _jsx(Stack.Screen, {\n            name: \"Splashscreen\",\n            component: SplashScreen,\n            options: {\n              title: 'Splash'\n            }\n          }) : userState.loggedIn ? _jsxs(_Fragment, {\n            children: [_jsx(Stack.Screen, {\n              name: \"Home\",\n              component: HomeScreen,\n              options: {\n                title: 'Home'\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"Profile\",\n              component: ProfileScreen\n            }), _jsx(Stack.Screen, {\n              name: \"QRScanner\",\n              component: QRScannerScreen\n            }), _jsx(Stack.Screen, {\n              name: \"QuestList\",\n              component: QuestListScreen\n            })]\n          }) : _jsxs(_Fragment, {\n            children: [_jsx(Stack.Screen, {\n              name: \"Login\",\n              component: LoginScreen\n            }), _jsx(Stack.Screen, {\n              name: \"Register\",\n              component: RegisterScreen\n            }), _jsx(Stack.Screen, {\n              name: \"PasswordReset\",\n              component: PasswordResetScreen\n            })]\n          }), userState != null && userState.isAdmin ? _jsx(_Fragment, {\n            children: _jsx(Stack.Screen, {\n              name: \"QRCodeGenerator\",\n              component: QRCodeGeneratorScreen\n            })\n          }) : _jsx(_Fragment, {})]\n        })\n      })\n    })\n  });\n}","map":{"version":3,"names":["StatusBar","React","defaultStyles","StyleSheet","Text","View","Image","Button","NavigationContainer","createNativeStackNavigator","HomeScreen","ProfileScreen","RegisterScreen","LoginScreen","QuestListScreen","UserContext","IsLoggedIn","SplashScreen","PasswordResetScreen","GetUserData","QRScannerScreen","QRCodeGeneratorScreen","Spacer","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","_React$useState","useState","_React$useState2","_slicedToArray","userState","setUserState","useEffect","checkLogin","_checkLogin","apply","arguments","_asyncToGenerator","loggedIn","isAdmin","result","success","response","newUserState","_objectSpread","style","flex","backgroundColor","container","children","Provider","value","Stack","Navigator","screenOptions","headerShown","Screen","name","component","options","title"],"sources":["C:/Workspace/Programming/Mobile/hiscoreapp/HI-SCORE/App.js"],"sourcesContent":["\nimport { StatusBar } from 'expo-status-bar';\nimport * as React from 'react';\nimport defaultStyles from './styles/defaultStyle.js';\nimport { StyleSheet, Text, View, Image, Button } from 'react-native';\nimport {NavigationContainer} from '@react-navigation/native';\nimport {createNativeStackNavigator} from '@react-navigation/native-stack';\nimport HomeScreen from './screens/HomeScreen.js'\nimport ProfileScreen from './screens/ProfileScreen.js'\nimport RegisterScreen from './screens/RegisterScreen.js'\nimport LoginScreen from './screens/LoginScreen.js';\nimport QuestListScreen from './screens/QuestListScreen.js'\nimport { UserContext } from './shared/Contexts.js';\nimport { IsLoggedIn } from './shared/GlobalStorage.js';\nimport SplashScreen from './screens/SplashScreen.js';\nimport PasswordResetScreen from './screens/PasswordResetScreen.js';\nimport {GetUserData} from './shared/CompanionAPI.js'\nimport { QRScannerScreen } from './screens/QRScannerScreen.js';\nimport QRCodeGeneratorScreen from './screens/QRCodeGenerator.js';\nimport Spacer from './shared/Spacer.js';\n\n//const Stack = createNativeStackNavigator();\n\nexport default function App() {\n\n  const [userState, setUserState] = React.useState(null);\n\n    //Check if logged in\n    React.useEffect(() => {\n         async function checkLogin() {\n          let loggedIn = await IsLoggedIn();\n          let isAdmin = false;\n\n          if(loggedIn) {\n            let result = await GetUserData();\n            loggedIn = loggedIn && result.success;\n            isAdmin = result.response.isAdmin;\n          }\n         \n\n          let newUserState = {...userState};\n          newUserState.loggedIn = loggedIn;\n          newUserState.isAdmin = isAdmin;\n          setUserState(newUserState);\n         }\n         checkLogin();\n    }, []);\n\n  return (\n\n      <View style={{flex: 1, backgroundColor: defaultStyles.container.backgroundColor}}>\n        <UserContext.Provider  value={{userState, setUserState}}>\n          <NavigationContainer>\n            <Stack.Navigator screenOptions={{\n                headerShown: false\n              }}>\n\n              {(\n                userState == null ?\n                (\n                  <Stack.Screen name=\"Splashscreen\"component={SplashScreen} options={{title: 'Splash'}}/>\n                )\n\n                : userState.loggedIn ?  \n                // Screens only visible when not logged in\n                (<>\n                  <Stack.Screen name=\"Home\"component={HomeScreen} options={{title: 'Home'}}/>\n                  <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n                  <Stack.Screen name=\"QRScanner\" component={QRScannerScreen} />\n                  <Stack.Screen name=\"QuestList\" component={QuestListScreen} />\n                </> ):\n                //Screens only visible when logged in\n                ( <>\n                  <Stack.Screen name=\"Login\" component={LoginScreen} />\n                  <Stack.Screen name=\"Register\" component={RegisterScreen} />\n                  <Stack.Screen name=\"PasswordReset\" component={PasswordResetScreen} />\n                </> )\n              )}\n\n              {(userState != null && userState.isAdmin) ? (<>\n              <Stack.Screen name=\"QRCodeGenerator\" component={QRCodeGeneratorScreen} />\n              </>) : <></>}\n\n            </Stack.Navigator>\n          </NavigationContainer>\n        </UserContext.Provider>\n      </View>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}