{"ast":null,"code":"import * as React from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport defaultStyles from \"./styles/defaultStyle.js\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport HomeScreen from \"./screens/HomeScreen.js\";\nimport ProfileScreen from \"./screens/ProfileScreen.js\";\nimport RegisterScreen from \"./screens/RegisterScreen.js\";\nimport LoginScreen from \"./screens/LoginScreen.js\";\nimport QuestListScreen from \"./screens/QuestListScreen.js\";\nimport { UserContext } from \"./shared/Contexts.js\";\nimport { IsLoggedIn } from \"./shared/GlobalStorage.js\";\nimport SplashScreen from \"./screens/SplashScreen.js\";\nimport PasswordResetScreen from \"./screens/PasswordResetScreen.js\";\nimport { GetUserData } from \"./shared/CompanionAPI.js\";\nimport { QRScannerScreen } from \"./screens/QRScannerScreen.js\";\nimport QRCodeGeneratorScreen from \"./screens/QRCodeGenerator.js\";\nimport Spacer from \"./shared/Spacer.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  console.log(\"TEST\");\n  return _jsx(View, {\n    children: _jsx(Text, {\n      children: \"Hello\"\n    })\n  });\n}","map":{"version":3,"names":["React","StatusBar","defaultStyles","StyleSheet","Text","View","Image","Button","NavigationContainer","createNativeStackNavigator","HomeScreen","ProfileScreen","RegisterScreen","LoginScreen","QuestListScreen","UserContext","IsLoggedIn","SplashScreen","PasswordResetScreen","GetUserData","QRScannerScreen","QRCodeGeneratorScreen","Spacer","jsx","_jsx","Stack","App","console","log","children"],"sources":["C:/Workspace/Programming/Mobile/hiscoreapp/HI-SCORE/App.js"],"sourcesContent":["import * as React from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport defaultStyles from './styles/defaultStyle.js';\nimport { StyleSheet, Text, View, Image, Button } from 'react-native';\nimport {NavigationContainer} from '@react-navigation/native';\nimport {createNativeStackNavigator} from '@react-navigation/native-stack';\nimport HomeScreen from './screens/HomeScreen.js'\nimport ProfileScreen from './screens/ProfileScreen.js'\nimport RegisterScreen from './screens/RegisterScreen.js'\nimport LoginScreen from './screens/LoginScreen.js';\nimport QuestListScreen from './screens/QuestListScreen.js'\nimport { UserContext } from './shared/Contexts.js';\nimport { IsLoggedIn } from './shared/GlobalStorage.js';\nimport SplashScreen from './screens/SplashScreen.js';\nimport PasswordResetScreen from './screens/PasswordResetScreen.js';\nimport {GetUserData} from './shared/CompanionAPI.js'\nimport { QRScannerScreen } from './screens/QRScannerScreen.js';\nimport QRCodeGeneratorScreen from './screens/QRCodeGenerator.js';\nimport Spacer from './shared/Spacer.js';\n\nconst Stack = createNativeStackNavigator();\n/*\nexport default function App() {\n\n  const [userState, setUserState] = React.useState(null);\n\n    //Check if logged in\n    React.useEffect(() => {\n         async function checkLogin() {\n          let loggedIn = await IsLoggedIn();\n          let isAdmin = false;\n\n          if(loggedIn) {\n            let result = await GetUserData();\n            loggedIn = loggedIn && result.success;\n            isAdmin = result.response.isAdmin;\n          }\n         \n\n          let newUserState = {...userState};\n          newUserState.loggedIn = loggedIn;\n          newUserState.isAdmin = isAdmin;\n          setUserState(newUserState);\n         }\n         checkLogin();\n    }, []);\n\n  return (\n\n      <View style={{flex: 1, backgroundColor: defaultStyles.container.backgroundColor}}>\n        <UserContext.Provider  value={{userState, setUserState}}>\n          <NavigationContainer>\n            <Stack.Navigator screenOptions={{\n                headerShown: false\n              }}>\n\n              {(\n                userState == null ?\n                (\n                  <Stack.Screen name=\"Splashscreen\"component={SplashScreen} options={{title: 'Splash'}}/>\n                )\n\n                : userState.loggedIn ?  \n                // Screens only visible when not logged in\n                (<>\n                  <Stack.Screen name=\"Home\"component={HomeScreen} options={{title: 'Home'}}/>\n                  <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n                  <Stack.Screen name=\"QRScanner\" component={QRScannerScreen} />\n                  <Stack.Screen name=\"QuestList\" component={QuestListScreen} />\n                </> ):\n                //Screens only visible when logged in\n                ( <>\n                  <Stack.Screen name=\"Login\" component={LoginScreen} />\n                  <Stack.Screen name=\"Register\" component={RegisterScreen} />\n                  <Stack.Screen name=\"PasswordReset\" component={PasswordResetScreen} />\n                </> )\n              )}\n\n              {(userState != null && userState.isAdmin) ? (<>\n              <Stack.Screen name=\"QRCodeGenerator\" component={QRCodeGeneratorScreen} />\n              </>) : <></>}\n\n            </Stack.Navigator>\n          </NavigationContainer>\n        </UserContext.Provider>\n      </View>\n  );\n}\n*/\n\n\nexport default function App() {\n\n  console.log(\"TEST\")\n\n  return (\n    <View><Text>Hello</Text></View>\n\n  )\n\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,aAAa;AAAiC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,MAAA;AAErD,SAAQC,mBAAmB,QAAO,0BAA0B;AAC5D,SAAQC,0BAA0B,QAAO,gCAAgC;AACzE,OAAOC,UAAU;AACjB,OAAOC,aAAa;AACpB,OAAOC,cAAc;AACrB,OAAOC,WAAW;AAClB,OAAOC,eAAe;AACtB,SAASC,WAAW;AACpB,SAASC,UAAU;AACnB,OAAOC,YAAY;AACnB,OAAOC,mBAAmB;AAC1B,SAAQC,WAAW;AACnB,SAASC,eAAe;AACxB,OAAOC,qBAAqB;AAC5B,OAAOC,MAAM;AAA2B,SAAAC,GAAA,IAAAC,IAAA;AAExC,IAAMC,KAAK,GAAGhB,0BAA0B,CAAC,CAAC;AAuE1C,eAAe,SAASiB,GAAGA,CAAA,EAAG;EAE5BC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EAEnB,OACEJ,IAAA,CAACnB,IAAI;IAAAwB,QAAA,EAACL,IAAA,CAACpB,IAAI;MAAAyB,QAAA,EAAC;IAAK,CAAM;EAAC,CAAM,CAAC;AAInC"},"metadata":{},"sourceType":"module","externalDependencies":[]}